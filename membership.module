<?php
/**
 * @file
 * Membership Module file.
 */

/**
 * Implements hook_help().
 */
function membership_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#membership":
      $output = t("Administer all aspects of BMW Motorrad Club Cape Membership.");
      break;
  }
  return $output;
}

/**
 * Implements hook_perm().
 */
function membership_perm() {
  return array(
    'create membership',
    'edit own membership',
    'administer membership',
  );
}

/**
 * Implements hook_menu().
 */
function membership_menu() {
  $items = array(
    'membership/list' => array(
      'title' => 'BMW Motorrad Club Cape Members',
      'description' => 'List the member records',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_list_form'),
      'access arguments' => array('administer membership'),
      'file' => 'membership-list.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/new' => array(
      'title' => 'Join BMW Motorrad Club Cape',
      'description' => 'Create a new member record',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_edit_form'),
      'access arguments' => array('create membership'),
      'file' => 'membership.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/edit/%' => array(
      'title' => 'Edit BMW Motorrad Club Cape Membership Info',
      'description' => 'Edit a member record',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_edit_form', 2),
      // Member number.
      'access arguments' => array('edit own membership'),
      'file' => 'membership.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/download' => array(
      'title' => 'Download CSV',
      'description' => 'Download the Export to CSV Created by the list screen.',
      'page callback' => 'membership_download',
      'access arguments' => array('administer membership'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/update/%' => array(
      'title' => 'Bulk Edit BMW Motorrad Club Cape Members',
      'description' => 'Bulk update member records from selection',
      'page callback' => 'membership_update',
      'page arguments' => array(2),
      // Action.
      'access arguments' => array('administer membership'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/setuids' => array(
      'title' => 'Populate UIDs from users table.',
      'page callback' => 'membership_uids',
      'access arguments' => array('administer site configuration'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function membership_theme() {
  return array(
    'theme_membership_edit_form' => array(
      'template' => 'membership-edit-form',
      'arguments' => array('form' => NULL),
    ),
    'theme_membership_list_form' => array(
      'template' => 'membership-list-form',
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implements hook_user().
 *
 * $edit contains changes, $account contains existing values.
 */
function membership_user($op, &$edit, &$account, $category) {
  if ($op == 'update' or $op == 'insert') {
    $uid = $account->uid;
    $oldemail = $account->mail;
    $newemail = $edit['mail'];
    rs_debug("118: In function membership_user: $op, oldemail=$oldemail, newemail=$newemail, uid=$uid");
  }
  if ($op == 'insert') {
    // New user, see if they have a membership record.
    $id = db_result(db_query("SELECT id FROM {membership} WHERE LOWER(email) = '%s'", strtolower(trim($newemail))));
    if ($id > 0) {
      db_query("UPDATE {membership} SET uid=%d WHERE id=%d", $uid, $id);
    }
  }
  elseif ($op == 'update' && strtolower($newemail) != strtolower($oldemail)) {
    // If we have a membership record with UID it takes precedence.
    $id = db_result(db_query("SELECT id FROM {membership} WHERE uid = %d", $uid));
    if ($id > 0) {
      db_query("UPDATE {membership} SET email='%s' WHERE id=%d", strtolower(trim($newemail)), $id);
    }
    else {
      // No uid, let's find a membership record by email.
      db_query("UPDATE {membership} SET uid = %d, email = '%s' WHERE (uid IS NULL OR uid=0) AND LOWER(email) = '%s'", $uid, $newemail, $oldemail);
    }
  }
}

// vim: set et ft=php sw=2 ai:
