<?php
/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function rs_drupal_users_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#rs_drupal_users":
      $output = '<p>'.t("Synchronize user profiles between Rocketseed and Drupal.").'</p>';
      break;
  }
  return $output;
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the rsuser module
*/
function rs_drupal_users_perm() {
  return array(
    'sync RS and Drupal users',
  );
} // function rs_drupal_users_perm()

/**
* @brief Link a menu path to this form
*/
function rs_drupal_users_menu() {
  $items = array();
  $items['rs_drupal_users/sync'] = array(
    'title' => 'Rocketseed/Drupal User Synchronization',
    'description' => 'Merge RS and Drupal user records',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rs_drupal_users_sync_form'),
    'access arguments' => array('sync RS and Drupal users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function rs_drupal_users_theme() {
  return array(
    'theme_rs_drupal_users_sync_form' => array(
    'template' => 'sync-form',
      'arguments' => array('form' => NULL)
    ),
  );
}

function rs_drupal_users_sync_form(&$form_state=NULL) {
  $form = array();
  $form['#tree'] = TRUE;
  $form['#theme'] = 'theme_rs_drupal_users_sync_form';
//$form['#action'] = '/rs_drupal_users/sync?XDEBUG_SESSION_START=1';
  $form['Synced'] = array(
    '#type' => 'fieldset',
    '#description' => t("These records are the same in Rocketseed as in Drupal."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['Synced']['deleters'] = array(
    '#type' => 'checkbox',
    '#title' => t('delete all RS'),
    '#attributes' => array(
      'class' => 'syncdeletersall',
      'onclick' => '$(\'.syncdeleters\')
        .each(
          function() {
            this.checked = $(\'.syncdeletersall\').is(":checked")
          }
        );',
    ),
  );
  $form['Synced']['deletedr'] = array(
    '#type' => 'checkbox',
    '#title' => t('delete all Drupal'),
    '#attributes' => array(
      'class' => 'syncdeletedrall',
      'onclick' => '$(\'.syncdeletedr\')
        .each(
          function() {
            this.checked = $(\'.syncdeletedrall\').is(":checked")
          }
        );',
    ),
  );
  $form['Active'] = array(
    '#type' => 'fieldset',
    '#description' => t("These records are not in the Rocketseed database, only in Drupal."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['Active']['copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('copy all'),
    '#attributes' => array(
      'class' => 'drcopy2rsall',
      'onclick' => '$(\'.drcopy2rs\')
        .each(
          function() {
            this.checked = $(\'.drcopy2rsall\').is(":checked")
          }
        );',
    ),
  );
  $form['Active']['delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('delete all'),
    '#attributes' => array(
      'class' => 'drdeleteall',
      'onclick' => '$(\'.drdelete\')
        .each(
          function() {
            this.checked = $(\'.drdeleteall\').is(":checked")
          }
        );',
    ),
  );
  $form['Common'] = array(
    '#type' => 'fieldset',
    '#description' => t("These records have the same email address on the active system (Drupal) and in the Rocketseed database."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['Common']['copy2rs'] = array(
    '#type' => 'checkbox',
    '#title' => t('copy all to RS'),
    '#attributes' => array(
      'class' => 'copy2rsall',
      'onclick' => '$(\'.copy2rs\')
        .each(
          function() {
            this.checked = $(\'.copy2rsall\').is(":checked")
          }
        );',
    ),
  );
  $form['Common']['deleters'] = array(
    '#type' => 'checkbox',
    '#title' => t('delete all RS'),
    '#attributes' => array(
      'class' => 'deletersall',
      'onclick' => '$(\'.deleters\')
        .each(
          function() {
            this.checked = $(\'.deletersall\').is(":checked")
          }
        );',
    ),
  );
  $form['Common']['copy2dr'] = array(
    '#type' => 'checkbox',
    '#title' => t('copy all to Drupal'),
    '#attributes' => array(
      'class' => 'copy2drall',
      'onclick' => '$(\'.copy2dr\')
        .each(
          function() {
            this.checked = $(\'.copy2drall\').is(":checked")
          }
        );',
    ),
  );
  $form['Common']['deletedr'] = array(
    '#type' => 'checkbox',
    '#title' => t('delete all Drupal'),
    '#attributes' => array(
      'class' => 'deletedrall',
      'onclick' => '$(\'.deletedr\')
        .each(
          function() {
            this.checked = $(\'.deletedrall\').is(":checked")
          }
        );',
    ),
  );
  $form['RSOnly'] = array(
    '#type' => 'fieldset',
    '#description' => t("These records are only in the Rocketseed database, possibly from a restored backup or from migration."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['RSOnly']['copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('copy all'),
    '#attributes' => array(
      'class' => 'rscopy2drall',
      'onclick' => '$(\'.rscopy2dr\')
        .each(
          function() {
            this.checked = $(\'.rscopy2drall\').is(":checked")
          }
        );',
    ),
  );
  $form['RSOnly']['delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('delete all'),
    '#attributes' => array(
      'class' => 'rsdeleteall',
      'onclick' => '$(\'.rsdelete\')
        .each(
          function() {
            this.checked = $(\'.rsdeleteall\').is(":checked")
          }
        );',
    ),
  );

  $SyncedCount = 0;
  $ActiveCount = 0;
  $CommonCount = 0;
  $RSOnlyCount = 0;

  $dr_user_result = db_query("SELECT * FROM {users}");
  while ($dr_user = db_fetch_object($dr_user_result)) {
    if (!$dr_user->uid) {
      continue;
    }
    $dr_user->roles = rs_drupal_users_get_drupal_roles($dr_user->uid);
    $dr_user->sender = rs_drupal_users_get_drupal_sender($dr_user->uid);
    $dr_user->account = rs_drupal_users_get_drupal_account($dr_user->uid);
    db_set_active('rocketseed');
    $rs_user = db_fetch_object(db_query("SELECT * FROM rs_users WHERE mail  = '%s'", $dr_user->mail));
    db_set_active('default');
    if (rs_drupal_users_match($dr_user, $rs_user)) { // put into 'synced' group
      $SyncedCount += 1;
      $form['Synced'][$dr_user->uid]['item'] = array(
        '#type' => 'item',
        '#value' => array(
          $dr_user->name,
          $dr_user->uid,
          $dr_user->mail,
        ),
      );
      $form['Synced'][$dr_user->uid]['deleters'] = array(
        '#type' => 'checkbox',
        '#title' => t('delete RS version'),
        '#attributes' => array('class' => 'syncdeleters'),
      );
      $form['Synced'][$dr_user->uid]['deletedr'] = array(
        '#type' => 'checkbox',
        '#title' => t('delete active version'),
        '#attributes' => array('class' => 'syncdeletedr'),
      );
    }
    elseif ($rs_user) { // rs and dr have the same email in each table, prompt for instruction
      $CommonCount += 1;
      $table = rs_drupal_users_diff_table($dr_user, $rs_user);
      $form['Common'][$dr_user->uid]['item'] = array(
        '#title' => t('Diff'),
        '#value' => $table,
      );
      $form['Common'][$dr_user->uid]['copy2rs'] = array(
        '#type' => 'checkbox',
        '#title' => t('copy to RS'),
        '#attributes' => array('class' => 'copy2rs'),
      );
      $form['Common'][$dr_user->uid]['copy2dr'] = array(
        '#type' => 'checkbox',
        '#title' => t('copy to Drupal'),
        '#attributes' => array('class' => 'copy2dr'),
      );
      $form['Common'][$dr_user->uid]['deleters'] = array(
        '#type' => 'checkbox',
        '#title' => t('delete RS version'),
        '#attributes' => array('class' => 'deleters'),
      );
      $form['Common'][$dr_user->uid]['deletedr'] = array(
        '#type' => 'checkbox',
        '#title' => t('delete active version'),
        '#attributes' => array('class' => 'deletedr'),
      );
    }
    else { // This user is in dr, but not in the rs sync table, so copy it in or delete it
      $ActiveCount += 1;
      $form['Active'][$dr_user->uid]['item'] = array(
        '#type' => 'item',
        '#value' => array(
          $dr_user->name,
          $dr_user->uid,
          $dr_user->mail,
        ),
      );
      $form['Active'][$dr_user->uid]['copy'] = array(
        '#type' => 'checkbox',
        '#title' => t('copy'),
        '#attributes' => array('class' => 'drcopy2rs'),
      );
      $form['Active'][$dr_user->uid]['delete'] = array(
        '#type' => 'checkbox',
        '#title' => t('delete'),
        '#attributes' => array('class' => 'drdelete'),
      );
    }
  }
  // Now we find all the users in the RS table that are not in the drupal tables:
  db_set_active('rocketseed');
  $rs_user_result = db_query("SELECT * FROM rs_users");
  db_set_active('default');
  while ($rs_user = db_fetch_object($rs_user_result)) {
    $dr_uid = db_result(db_query("SELECT uid FROM {users} WHERE mail = '%s'", $rs_user->mail));
    if (!$dr_uid) {
      $RSOnlyCount += 1;
      $form['RSOnly'][$rs_user->mail]['item'] = array(
        '#type' => 'item',
        '#value' => array(
          $rs_user->name,
          $rs_user->uid,
          $rs_user->mail,
        ),
      );
      $form['RSOnly'][$rs_user->mail]['copy'] = array(
        '#type' => 'checkbox',
        '#title' => t('copy'),
        '#attributes' => array('class' => 'rscopy2dr'),
      );
      $form['RSOnly'][$rs_user->mail]['delete'] = array(
        '#type' => 'checkbox',
        '#title' => t('delete'),
        '#attributes' => array('class' => 'rsdelete'),
      );
    }
  }
  $form['submit'] = array(
    '#type' => 'fieldset',
  );
  $form['submit']['process'] = array(
    '#type' => 'submit',
    '#value' => t('synchronize'),
  );
  // Add some niceties to the fieldsets now that we know how many records are in each
  $form['Synced']['#title'] = t("Fully Synchronized records (@sc)", array('@sc'=>$SyncedCount,));
  $form['Active']['#title'] = t("User Logins Active in Drupal but not in Rocketseed (@ac)", array('@ac'=>$ActiveCount,));
  if ($ActiveCount) {
    $form['Active']['#collapsed'] = FALSE;
  }
  $form['Common']['#title'] = t("Differences between Rocketseed and Drupal users (@cc)", array('@cc'=>$CommonCount,));
  if ($CommonCount) {
    $form['Common']['#collapsed'] = FALSE;
  }
  $form['RSOnly']['#title'] = t("Users in Rocketseed DB only (@rc)", array('@rc'=>$RSOnlyCount,));
  if ($RSOnlyCount) {
    $form['RSOnly']['#collapsed'] = FALSE;
  }

  return $form;
}

function rs_drupal_users_sync_form_submit($form, &$form_state) {
  global $user; // logged in user, cannot delete himself
  foreach ($form_state['values']['Active'] as $uid => $actions) {
    if ($actions['copy']) {
      rs_drupal_users_copy_dr2rs($uid);
    }
    if ($actions['delete']) {
      if ($user->uid == $uid OR $uid == 1) {
        rscommon_log('User', "Can't delete uid 1 or logged in uid $uid");
      }
      else {
        user_delete(NULL, $uid);
        rscommon_log('User', "Deleted uid $uid");
      }
    }
  }
  foreach ($form_state['values']['Synced'] as $uid => $actions) {
    if ($actions['deletedr']) {
      if ($user->uid == $uid OR $uid == 1) {
        rscommon_log('User', "Can't delete uid 1 or logged in uid $uid");
      }
      else {
        user_delete(NULL, $uid);
        rscommon_log('User', "Deleted uid $uid");
      }
    }
    if ($actions['deleters']) {
      rs_drupal_users_delete($uid);
      rscommon_log('User', "Deleted uid $uid from Rocketseed");
    }
  }
  foreach ($form_state['values']['Common'] as $uid => $actions) {
    if ($actions['copy2rs']) {
      rs_drupal_users_copy_dr2rs($uid);
    }
    elseif ($actions['copy2dr']) {
      rs_drupal_users_copy_rs2dr($uid);
    }
    if ($actions['deletedr']) {
      if ($user->uid == $uid OR $uid == 1) {
        rscommon_log('User', "Can't delete uid 1 or logged in uid $uid");
      }
      else {
        user_delete(NULL, $uid);
        rscommon_log('User', "Deleted uid $uid");
      }
    }
    if ($actions['deleters']) {
      rs_drupal_users_delete($uid);
      rscommon_log('User', "Deleted uid $uid from Rocketseed");
    }
  }
  foreach ($form_state['values']['RSOnly'] as $email => $actions) {
    if ($actions['copy']) {
      rs_drupal_users_sync_rs2dr($email);
    }
    if ($actions['delete']) {
      rs_drupal_rs_users_delete($email);
      rscommon_log('User', "Deleted rs_user record with email $email");
    }
  }
}

/**
* @brief True if the {user} and rs_user records are 'identical'
*
* @param $dr_user object holding record as in drupal's {user} table
* @param $rs_user object holding record from rs_user in Rocketseed
*
* @return True if the records are synced in the aspects that matter
*/
function rs_drupal_users_match($dr_user, $rs_user) {
  // Check the obvious and easy ones first
  if (
       $dr_user->uid != $rs_user->uid OR
       $dr_user->name != $rs_user->name OR
       $dr_user->mail != $rs_user->mail OR
       $dr_user->pass != $rs_user->pass
     ) {
    return FALSE;
  }
  // Ok, so far so good, how about the roles?
  $roles = rs_drupal_users_get_drupal_roles($dr_user->uid);
  if ($roles != $rs_user->roles) {
    return FALSE;
  }
  // Get here if records match so far - but maybe account/sender differs?
  $dr_sender = rs_drupal_users_get_drupal_sender($dr_user->uid);
  if ($dr_sender) {
    if ($dr_sender != $rs_user->sender) {
      return FALSE;
    }
  }
  else { // No sender in lnkUserSender, so check account value
    $dr_account = rs_drupal_users_get_drupal_account($dr_user->uid);
    if ($dr_account != $rs_user->account) {
      return FALSE;
    }
  }

  // Check the rest of the fields just to be sure
  if (
       $dr_user->mode != $rs_user->mode OR
       $dr_user->sort != $rs_user->sort OR
       $dr_user->threshold != $rs_user->threshold OR
       $dr_user->theme != $rs_user->theme OR
       $dr_user->signature != $rs_user->signature OR
       $dr_user->signature_format != $rs_user->signature_format OR
//       $dr_user->created != $rs_user->created OR
//       $dr_user->access != $rs_user->access OR
//       $dr_user->login != $rs_user->login OR
       $dr_user->status != $rs_user->status OR
       $dr_user->timezone != $rs_user->timezone OR
       $dr_user->language != $rs_user->language OR
       $dr_user->picture != $rs_user->picture OR
       $dr_user->init != $rs_user->init OR
       $dr_user->data != $rs_user->data
     ) {
    return FALSE;
  }
  return TRUE;
}

function rs_drupal_users_diff_table($dr_user, $rs_user) {
  $table = array();
  $rs_user_array = (array)$rs_user;
  foreach ($rs_user_array as $field=>$value) {
    if (
        $field=='id' or
        $field=='created' or
        $field=='access' or
        $field=='login' or
        $field=='init' // ignore
       ) {
      continue;
    }
    if ($dr_user->$field != $value) {
      $style = 'background:#faa';
    }
    else {
      $style = 'background:transparent';
    }
    if ($field=='pass' or $field=='data') {
      $table['Dr'][] = array( 'data'=>substr($dr_user->$field,0,2).'..'.substr($dr_user->$field, -2), 'style'=>$style, 'class'=>"st_$field",);
      $table['Rs'][] = array( 'data'=>substr($value, 0, 2).'..'.substr($value, -2), 'style'=>$style, 'class'=>"st_$field");
    }
    else {
      $table['Dr'][] = array( 'data'=>$dr_user->$field, 'style'=>$style, 'class'=>"st_$field",);
      $table['Rs'][] = array( 'data'=>$value, 'style'=>$style, 'class'=>"st_$field",);
    }
  }

  return $table;
}

function rs_drupal_users_copy_dr2rs($uid) {
  if (!$uid) {
    watchdog('error', 'Attempt to copy UID of $uid to rocketseed sync table.');
    return;
  }
  $user = user_load($uid);
  $roles = rs_drupal_users_get_drupal_roles($uid);

  db_set_active("rocketseed");
  db_query("SELECT * FROM \"apiSyncUserRecord\"(%d, '%s', '%s', '%s', %d, %d, %d, '%s', '%s', %d, %d, %d, %d, %d, '%s', '%s', '%s', '%s', '%s', '%s')",
    $uid, $user->name, $user->pass, $user->mail, $user->mode, $user->sort, $user->threshold, $user->theme, $user->signature, $user->signature_format, $user->created, $user->access, $user->login, $user->status, $user->timezone, $user->language, $user->picture, $user->init, $user->data, $roles
  );
  db_set_active("default");
  rscommon_log('User', "Copied uid $uid to RS database");
}


/**
* @brief Copy details from the RS rs_users table to the Drupal users table
*
* @param $uid refers to the uid on the Drupal side, there is no guarantee
* that it matches on the rocketseed side.  So you need to get the drupal
* user's email address, and use that to find the appropriate RS record.
*
* Also, since we are moving data from RS to Drupal, you need to update
* the lnkUserSender table with values found in rs_users, and set roles.
*
* @return
*/
function rs_drupal_users_copy_rs2dr($uid) {
  $user = user_load($uid);

  db_set_active('rocketseed');
  $rs_user = db_fetch_object(db_query("SELECT * FROM rs_users WHERE mail='%s'", $user->mail));
  db_set_active('default');

  _rs_drupal_users_populate_user($user, $rs_user);
  $data_array = unserialize($user->data);
  unset($user->data);
  user_save($user, $data_array);

  // Now we move any sender or account values into lnkUserSender

  db_set_active('rocketseed');
  if ($rs_user->sender) {
    db_query("SELECT * FROM \"apiAddSenderToUser\"(%d, %d)", $uid, $rs_user->sender);
  }
  if ($rs_user->account) {
    db_query("SELECT * FROM \"apiAddAccountToUser\"(%d, %d)", $uid, $rs_user->account);
  }
  db_set_active('default');

  rscommon_log('User', "Copied uid $uid from RS database to drupal with sender id ".$rs_user->sender);
}

function rs_drupal_users_sync_rs2dr($email) {

  db_set_active('rocketseed');
  $rs_user = db_fetch_object(db_query("SELECT * FROM rs_users WHERE mail='%s'", $email));
  db_set_active('default');

  $user = (object)array();
  _rs_drupal_users_populate_user($user, $rs_user);
  $newuser = (array)$user;
  $newuser['created'] = mktime();
  $newuser['status'] = 1;
  unset($newuser['uid']);
  $druser = user_save($druser, $newuser);
  // for some reason the above line buggers up the password hash, so copy it over by hand like this...
  db_query("UPDATE {users} SET pass='%s' WHERE name='%s'", $newuser['pass'], $newuser['name']);


  // Now we move any sender or account values into lnkUserSender

  db_set_active('rocketseed');
  if ($rs_user->sender) {
    db_query("SELECT * FROM \"apiAddSenderToUser\"(%d, %d)", $druser->uid, $rs_user->sender);
  }
  if ($rs_user->account) {
    db_query("SELECT * FROM \"apiAddAccountToUser\"(%d, %d)", $druser->uid, $rs_user->account);
  }
  db_set_active('default');

  // Update uid on the rocketseed side with the new uid on this side
  db_set_active('rocketseed');
  db_query("UPDATE rs_users SET uid = %d WHERE mail = '%s'", $druser->uid, $email);
  db_set_active('default');

  rscommon_log('User', "Copied $email from RS database to drupal with sender id ".$rs_user->sender." to create user ".$druser->uid);
}

function _rs_drupal_users_populate_user(&$user, $rs_user) {
  $user->uid = $rs_user->uid;
  $user->name = $rs_user->name;
  $user->pass = $rs_user->pass;
  $user->mail = $rs_user->mail;
  $user->mode = $rs_user->mode;
  $user->sort = $rs_user->sort;
  $user->threshold = $rs_user->threshold;
  $user->theme = $rs_user->theme;
  $user->signature = $rs_user->signature;
  $user->signature_format = $rs_user->signature_format;
  $user->created = $rs_user->created;
  $user->access = $rs_user->access;
  $user->login = $rs_user->login;
  $user->status = $rs_user->status;
  $user->timezone = $rs_user->timezone;
  $user->language = $rs_user->language;
  $user->picture = $rs_user->picture;
  $user->init = $rs_user->init;
//  $user->data = $rs_user->data;

  $rs_user_data = unserialize($rs_user->data);
  if (is_array($rs_user_data)) {
    foreach (unserialize($rs_user->data) as $key=>$value) {
      $user->$key = $value;
    }
  }

  $role_array = explode(',', $rs_user->roles);
  $roles = array();
  foreach ($role_array as $rid) {
    $rname = db_result(db_query("SELECT name FROM {role} WHERE rid = %d", $rid));
    $roles[$rid] = $rname;
  }
  $user->roles = $roles;
  return;
}

/**
* @brief Remove a record from the Rocketseed DB rs_user table
*
* When this is called, there is a similar record in the Drupal user table,
* so we don't remove any lnkUserSender records or other dependencies.
*
* @param $uid is the set UID in that record.
*
* @return NULL
*/
function rs_drupal_users_delete($uid) {
  $user = user_load($uid);
  db_set_active('rocketseed');
  db_query("SELECT * FROM \"apiDeleteUserAuth\"('%s')", $user->mail);
  db_set_active('default');
}

/**
* @brief Remove a record from the Rocketseed DB rs_user table
*
* When this is called, there is a no record in the Drupal user table,
* so we can remove any lnkUserSender records or other dependencies.
*
* @param $email is the email in that record.
*
* @return NULL
*/
function rs_drupal_rs_users_delete($email) {
  db_set_active('rocketseed');
  db_query("SELECT * FROM \"apiDeleteUserAuth\"('%s')", $email);
  db_set_active('default');
}

function rs_drupal_users_get_drupal_roles($uid) {
  $role_result = db_query("SELECT * FROM {users_roles} WHERE uid=%d ORDER BY rid", $uid);
  $roles = array();
  while ($rid = db_fetch_array($role_result)) {
    $roles[] = $rid['rid'];
  }
  return(join(',', $roles));
}

function rs_drupal_users_get_drupal_sender($uid) {
  db_set_active('rocketseed');
  $sender = db_result(db_query("SELECT tsender FROM \"apiGetSenderByUserId\"(%d)", $uid));
  db_set_active('default');
  return($sender);
}

function rs_drupal_users_get_drupal_account($uid) {
  db_set_active('rocketseed');
  $account = db_result(db_query("SELECT taccount FROM \"apiGetAccountByUserId\"(%d)", $uid));
  db_set_active('default');
  if (!$account) { // look it up from the sender value for that uid, sometimes sender is set but not account
    $sender = rs_drupal_users_get_drupal_sender($uid);
    if ($sender) {
      db_set_active('rocketseed');
      $account = db_result(db_query("SELECT tparentaccountid FROM \"apiGetSender\"(%d)", $sender));
      db_set_active('default');
    }
  }
  return($account);
}

/* vim: set et ft=php sw=2: */
