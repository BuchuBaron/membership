<?php
/**
 * @file
 * Membership Module file.
 */

/**
 * Implements hook_help().
 */
function membership_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#membership":
      $output = t("Administer all aspects of BMW Motorrad Club Cape Membership.");
      break;
  }
  return $output;
}

/**
 * Implements hook_perm().
 */
function membership_perm() {
  return array(
    'create membership',
    'edit own membership',
    'view membership status',
    'administer membership',
  );
}

/**
 * Implements hook_menu().
 */
function membership_menu() {
  $items = array(
    'membership/list' => array(
      'title' => 'BMW Motorrad Club Cape Members',
      'description' => 'List the member records',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_list_form'),
      'access arguments' => array('administer membership'),
      'file' => 'membership-list.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/new' => array(
      'title' => 'Join BMW Motorrad Club Cape',
      'description' => 'Create a new member record',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_edit_form'),
      'access arguments' => array('create membership'),
      'file' => 'membership.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/edit/%' => array(
      'title' => 'Edit BMW Motorrad Club Cape Membership Info',
      'description' => 'Edit a member record',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_edit_form', 2),
      // Member number.
      'access arguments' => array('edit own membership'),
      'file' => 'membership.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/download' => array(
      'title' => 'Download CSV',
      'description' => 'Download the Export to CSV Created by the list screen.',
      'page callback' => 'membership_download',
      'access arguments' => array('administer membership'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/update/%' => array(
      'title' => 'Bulk Edit BMW Motorrad Club Cape Members',
      'description' => 'Bulk update member records from selection',
      'page callback' => 'membership_update',
      'page arguments' => array(2),
      // Action.
      'access arguments' => array('administer membership'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/restore/%/%' => array(
      'title' => 'Bulk Restore.',
      'description' => 'Bulk Reverse an entry from the audit log.',
      'page callback' => 'membership_restore',
      'page arguments' => array(2, 3),
      // UID, Date-time.
      'access arguments' => array('administer membership'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/setuids' => array(
      'title' => 'Populate UIDs from users table.',
      'page callback' => 'membership_uids',
      'access arguments' => array('administer site configuration'),
      'file' => 'membership-admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'membership/status' => array(
      'title' => 'BMW Motorrad Club Cape Member Status.',
      'description' => 'Confirm whether a person is an active member.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_status_form'),
      'access arguments' => array('view membership status'),
      'file' => 'membership.inc',
      'type' => MENU_CALLBACK,
    ),
    'admin/settings/membership' => array(
      'title' => 'Membership module settings',
      'description' => 'Set notification emails for the membership admin module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_admin'),
      'access arguments' => array('administer membership'),
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/ajax/%/%' => array(
      'description' => 'Get the _SESSION values of the show/hide checkboxes.',
      'page callback' => 'membership_admin_session',
      'page arguments' => array(2, 3),
      // Action = get/set, Session variable = (status, sort, identity, contact,
      // emergency)
      'access arguments' => array('administer membership'),
      'file' => 'membership-admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
  return $items;
}

/**
 * Implements hook_admin().
 */
function membership_admin() {
  $form = array();

  $form['membership_notify'] = array(
    '#type' => 'textarea',
    '#title' => t('Emails to Notify of Membership Changes.'),
    '#default_value' => variable_get('membership_notify', 'charles@honeybadger.net'),
    '#description' => t("The comma-separated email addresses of people to notify when membership details are created or updated."),
    '#required' => TRUE,
  );

  $form['apply_member_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Body for Application Confirmation.'),
    '#default_value' => variable_get('apply_member_body', 'The body of the confirmation email when a user applies for membership'),
    '#description' => t("The contents of the application confirmation email body."),
    '#prefix' => '<p>The following tokens are available  in these fields: @MemberName, @MemberDetails, !site, !ClickHere.</p>',
    '#required' => TRUE,
  );

  $form['apply_admin_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Body for Application Notification of Administrators.'),
    '#default_value' => variable_get('apply_admin_body', 'The body of the confirmation email when a user applies for membership'),
    '#description' => t("The contents of the application confirmation email body."),
    '#required' => TRUE,
  );
  $form['update_member_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Body for Update Confirmation.'),
    '#default_value' => variable_get('update_member_body', 'The body of the confirmation email when a user updates their membership details.'),
    '#description' => t("The contents of the update confirmation email body."),
    '#required' => TRUE,
  );
  $form['update_admin_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Body for Membership Update Notification of Administrators.'),
    '#default_value' => variable_get('update_admin_body', 'The body of the confirmation email when a user updates their membership record.'),
    '#description' => t("The contents of the update notification email body."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_mail().
 */
function membership_mail($key, &$message, $params) {
  $language = $message['language'];
  $params = array_merge($params, user_mail_tokens($params['account'], $language));

  switch ($key) {
    case 'apply_member':
      $message['subject'] = variable_get("${key}_subject", t('Membership Application Received from !site', $params, $language->language));
      $message['body'][] = variable_get("${key}_body", t("<p>Dear @MemberName<br /><br />Your membership application has been received.</p>", $params, $language->language));
      break;

    case 'update_member':
      $message['subject'] = variable_get("${key}_subject", t('Membership Record Update from !site', $params, $language->language));
      $message['body'][] = variable_get("${key}_body", t("<p>Dear @MemberName<br /><br />Your membership record has been updated.</p>", $params, $language->language));
      break;

    case 'apply_admin':
      $message['subject'] = variable_get("${key}_subject", t('Membership Application Received from !site', $params, $language->language));
      $message['body'][] = variable_get("${key}_body", t("<html><body><p>Dear administrator<br /><br />There is a new membership application: @MemberDetails<br />!ClickHere</p></body></html>", $params, $language->language));
      break;

    case 'update_admin':
      $message['subject'] = variable_get("${key}_subject", t('Membership Record Update from !site', $params, $language->language));
      $message['body'][] = variable_get("${key}_body", t("<html><body><p>Dear administrator<br /><br />The following membership record has been updated: @MemberDetails<br />!ClickHere</p></body></html>", $params, $language->language));
      break;
  }

  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $message['headers']['Content-Transfer-Encoding'] = '8Bit';
  $message['headers']['X-Mailer'] = 'Drupal';
  $message['headers']['From'] = 'membership@bmwmotorradclubcape.co.za';
}

/**
 * Implements hook_theme().
 */
function membership_theme() {
  return array(
    'theme_membership_edit_form' => array(
      'template' => 'membership-edit-form',
      'arguments' => array('form' => NULL),
    ),
    'theme_membership_list_form' => array(
      'template' => 'membership-list-form',
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implements hook_user().
 *
 * $edit contains changes, $account contains existing values.
 */
function membership_user($op, &$edit, &$account, $category) {
  if ($op == 'update' or $op == 'insert') {
    $uid = $account->uid;
    $oldemail = $account->mail;
    $newemail = $edit['mail'];
  }
  if ($op == 'insert') {
    // New user, see if they have a membership record.
    $id = db_result(db_query("SELECT id FROM {membership} WHERE LOWER(email) = '%s'", strtolower(trim($newemail))));
    if ($id > 0) {
      db_query("UPDATE {membership} SET uid=%d WHERE id=%d", $uid, $id);
    }
  }
  elseif ($op == 'update' && strtolower($newemail) != strtolower($oldemail)) {
    // If we have a membership record with UID it takes precedence.
    $id = db_result(db_query("SELECT id FROM {membership} WHERE uid = %d", $uid));
    if ($id > 0) {
      db_query("UPDATE {membership} SET email='%s' WHERE id=%d", strtolower(trim($newemail)), $id);
    }
    else {
      // No uid, let's find a membership record by email.
      db_query("UPDATE {membership} SET uid = %d, email = '%s' WHERE (uid IS NULL OR uid=0) AND LOWER(email) = '%s'", $uid, $newemail, $oldemail);
    }
  }
}

// vim: set et ft=php sw=2 ai:
